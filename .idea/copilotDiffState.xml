<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/django_model_suite/generators/admin/checklist_generator.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/django_model_suite/generators/admin/checklist_generator.py" />
              <option name="originalContent" value="# checklist_generator.py&#10;from ..base import BaseGenerator&#10;&#10;&#10;class ChecklistGenerator(BaseGenerator):&#10;    def generate(self, fields: list) -&gt; None:&#10;        model_name = self.model.__name__&#10;        &#10;        content = f'''# {model_name} Admin Configuration Checklist&#10;&#10;## Configuration Review Checklist&#10;*Use 'x' to mark completed items - Navigate with Tab/Arrow keys*&#10;&#10;### ✅ 1. List View Configuration&#10;[ ] **Order of records is intuitive**&#10;    ▪ Verify the default sort makes business sense  &#10;    ▪ Consider if users expect newest/oldest first&#10;&#10;### ✅ 2. Field Editability  &#10;[ ] **No values in changelist are editable that should be read-only**&#10;    ▪ Check that sensitive fields are protected&#10;    ▪ Check no fields are read-only that should be editable&#10;&#10;[ ] **All necessary fields are editable where appropriate**&#10;    ▪ Verify important fields can be quick-edited from list view&#10;    ▪ Balance between usability and data integrity&#10;&#10;### ✅ 3. Export Functionality&#10;[ ] **Export is properly handled**&#10;    ▪ Verify resource.py includes all necessary fields&#10;    ▪ Test export with sample data&#10;    ▪ Check if sensitive data should be excluded from exports&#10;    ▪ Ensure export format meets requirements (CSV, Excel, etc.)&#10;    Notes: ________________________________&#10;&#10;### ✅ 4. List View Display&#10;[ ] **Important columns are displayed in list view**&#10;    ▪ Review `list_display` in list_view.py&#10;    ▪ Include key identifying information&#10;    ▪ Show status/state fields when relevant&#10;    ▪ Balance between information and readability&#10;    Notes: ________________________________&#10;&#10;### ✅ 5. Derived Fields Display&#10;[ ] **Checked if derived fields could be shown in list view**&#10;    ▪ Look for calculated properties on the model&#10;    ▪ Consider showing computed values (totals, counts, statuses)&#10;    ▪ Add custom display methods for complex derived data&#10;    ▪ Check display.py for custom display decorators&#10;    Notes: ________________________________&#10;&#10;### ✅ 6. Create Form Configuration&#10;[ ] **Only necessary values are in the create form**&#10;    ▪ Review fieldsets in change_view.py&#10;    ▪ Remove auto-calculated fields from create form&#10;    ▪ Hide fields that are set programmatically&#10;    ▪ Ensure required fields are clearly marked&#10;    Notes: ________________________________&#10;&#10;### ✅ 7. Inline Admin Configuration&#10;[ ] **Handled needed inline admin relationships**&#10;    ▪ Check if related models should be edited inline&#10;    ▪ Verify inline.py configuration if applicable&#10;    ▪ Consider TabularInline vs StackedInline based on data&#10;    ▪ Set appropriate `extra` count for new inlines&#10;    Notes: ________________________________&#10;&#10;---&#10;&#10;###  Additional Quality Checks&#10;&#10;[ ] **8. Permissions are properly configured**&#10;    ▪ Review permissions.py for field-level permissions&#10;    ▪ Test with different user roles&#10;    ▪ Verify sensitive data protection&#10;    Notes: ________________________________&#10;&#10;[ ] **9. Search functionality works**&#10;    ▪ Test search fields if configured&#10;    ▪ Ensure search covers important text fields&#10;    Notes: ________________________________&#10;&#10;[ ] **10. Filters are useful**&#10;    ▪ Check list_filter configuration&#10;    ▪ Add date filters for timestamp fields&#10;    ▪ Include status/category filters where relevant&#10;    Notes: ________________________________&#10;&#10;[ ] **11. Admin interface is user-friendly**&#10;    ▪ Test the full workflow: list → detail → edit → save&#10;    ▪ Verify validation messages are clear&#10;    ▪ Check that help_text is provided where needed&#10;    Notes: ________________________________&#10;&#10;---&#10;&#10;## Final Review&#10;[ ] **All items above completed**&#10;[ ] **Tested with sample data**&#10;[ ] **Ready for production**&#10;&#10;**Reviewer:** ________________  **Date:** ________________&#10;&#10;---&#10;*Generated for {model_name} - Mark each [ ] with 'x' when completed*&#10;*Keyboard Navigation: Use Tab to move between checkboxes, Space/Enter to edit*&#10;'''&#10;        self.write_file('CHECKLIST.md', content)&#10;" />
              <option name="updatedContent" value="# checklist_generator.py&#10;from ..base import BaseGenerator&#10;&#10;&#10;class ChecklistGenerator(BaseGenerator):&#10;    def generate(self, fields: list) -&gt; None:&#10;        model_name = self.model.__name__&#10;        &#10;        content = f'''# {model_name} Admin Configuration Checklist&#10;&#10;## Configuration Review Checklist&#10;*Use 'x' to mark completed items - Navigate with Tab/Arrow keys*&#10;&#10;### ✅ 1. List View Configuration&#10;[ ] **Order of records is intuitive**&#10;    ▪ Verify the default sort makes business sense&#10;    ▪ Consider if users expect newest/oldest first&#10;&#10;### ✅ 2. Field Editability  &#10;[ ] **No values in changelist are editable that should be read-only**&#10;    ▪ Check that sensitive fields are protected&#10;    ▪ Check no fields are read-only that should be editable&#10;&#10;[ ] **All necessary fields are editable where appropriate**&#10;    ▪ Verify important fields can be quick-edited from list view&#10;    ▪ Balance between usability and data integrity&#10;&#10;### ✅ 3. Export Functionality&#10;[ ] **Export is properly handled**&#10;    ▪ Verify resource.py includes all necessary fields&#10;    ▪ Test export with sample data&#10;    ▪ Check if sensitive data should be excluded from exports&#10;    ▪ Ensure export format meets requirements (CSV, Excel, etc.)&#10;    Notes: ________________________________&#10;&#10;### ✅ 4. List View Display&#10;[ ] **Important columns are displayed in list view**&#10;    ▪ Review `list_display` in list_view.py&#10;    ▪ Include key identifying information&#10;    ▪ Show status/state fields when relevant&#10;    ▪ Balance between information and readability&#10;    Notes: ________________________________&#10;&#10;### ✅ 5. Derived Fields Display&#10;[ ] **Checked if derived fields could be shown in list view**&#10;    ▪ Look for calculated properties on the model&#10;    ▪ Consider showing computed values (totals, counts, statuses)&#10;    ▪ Add custom display methods for complex derived data&#10;    ▪ Check display.py for custom display decorators&#10;    Notes: ________________________________&#10;&#10;### ✅ 6. Create Form Configuration&#10;[ ] **Only necessary values are in the create form**&#10;    ▪ Review fieldsets in change_view.py&#10;    ▪ Remove auto-calculated fields from create form&#10;    ▪ Hide fields that are set programmatically&#10;    ▪ Ensure required fields are clearly marked&#10;    Notes: ________________________________&#10;&#10;### ✅ 7. Inline Admin Configuration&#10;[ ] **Handled needed inline admin relationships**&#10;    ▪ Check if related models should be edited inline&#10;    ▪ Verify inline.py configuration if applicable&#10;    ▪ Consider TabularInline vs StackedInline based on data&#10;    ▪ Set appropriate `extra` count for new inlines&#10;    Notes: ________________________________&#10;&#10;---&#10;&#10;###  Additional Quality Checks&#10;&#10;[ ] **8. Permissions are properly configured**&#10;    ▪ Review permissions.py for field-level permissions&#10;    ▪ Test with different user roles&#10;    ▪ Verify sensitive data protection&#10;    Notes: ________________________________&#10;&#10;[ ] **9. Search functionality works**&#10;    ▪ Test search fields if configured&#10;    ▪ Ensure search covers important text fields&#10;    Notes: ________________________________&#10;&#10;[ ] **10. Filters are useful**&#10;    ▪ Check list_filter configuration&#10;    ▪ Add date filters for timestamp fields&#10;    ▪ Include status/category filters where relevant&#10;    Notes: ________________________________&#10;&#10;[ ] **11. Admin interface is user-friendly**&#10;    ▪ Test the full workflow: list → detail → edit → save&#10;    ▪ Verify validation messages are clear&#10;    ▪ Check that help_text is provided where needed&#10;    Notes: ________________________________&#10;&#10;---&#10;&#10;## Final Review&#10;[ ] **All items above completed**&#10;[ ] **Tested with sample data**&#10;[ ] **Ready for production**&#10;&#10;**Reviewer:** ________________  **Date:** ________________&#10;&#10;---&#10;*Generated for {model_name} - Mark each [ ] with 'x' when completed*&#10;*Keyboard Navigation: Use Tab to move between checkboxes, Space/Enter to edit*&#10;'''&#10;        self.write_file('CHECKLIST.md', content)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/django_model_suite/management/commands/generate_files.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/django_model_suite/management/commands/generate_files.py" />
              <option name="originalContent" value="import os&#10;&#10;from django.apps import apps&#10;from django.core.management import BaseCommand&#10;&#10;from ...generators.admin.admin_generator import AdminGenerator&#10;from ...generators.admin.change_view_generator import ChangeViewGenerator&#10;from ...generators.admin.checklist_generator import ChecklistGenerator&#10;from ...generators.admin.context_generator import ContextGenerator&#10;from ...generators.admin.display_generator import DisplayGenerator&#10;from ...generators.admin.inline import InlineAdminGenerator&#10;from ...generators.admin.list_view_generator import ListViewGenerator&#10;from ...generators.admin.permissions_generator import PermissionsGenerator&#10;from ...generators.admin.resource_generator import ResourceGenerator&#10;from ...generators.api.filter_generator import FilterGenerator&#10;from ...generators.api.pagination_generator import PaginationGenerator&#10;from ...generators.api.serializer_generator import SerializerGenerator&#10;from ...generators.api.url_generator import URLGenerator&#10;from ...generators.api.view_generator import ViewGenerator&#10;from ...generators.domain.selector_generator import SelectorGenerator&#10;from ...generators.domain.service_generator import ServiceGenerator&#10;from ...generators.domain.validator_generator import ValidatorGenerator&#10;from ...generators.field.fields_generator import FieldsGenerator&#10;from ...generators.model_utils import get_model_fields&#10;&#10;&#10;class Command(BaseCommand):&#10;    COMPONENT_CONFIGS = {&#10;        &quot;fields&quot;: {&#10;            &quot;path_template&quot;: &quot;fields/&quot;,&#10;            &quot;generators&quot;: [&#10;                FieldsGenerator,&#10;            ],&#10;        },&#10;        &quot;admin&quot;: {&#10;            &quot;path_template&quot;: &quot;admin/{model}/&quot;,&#10;            &quot;generators&quot;: [&#10;                ListViewGenerator,&#10;                ChangeViewGenerator,&#10;                PermissionsGenerator,&#10;                # ContextGenerator,&#10;                DisplayGenerator,&#10;                ResourceGenerator,&#10;                InlineAdminGenerator,&#10;                AdminGenerator,&#10;            ],&#10;        },&#10;        &quot;api&quot;: {&#10;            &quot;path_template&quot;: &quot;api/{model}/&quot;,&#10;            &quot;generators&quot;: [&#10;                SerializerGenerator,&#10;                ViewGenerator,&#10;                URLGenerator,&#10;                FilterGenerator,&#10;                PaginationGenerator,&#10;            ],&#10;        },&#10;        &quot;selectors&quot;: {&#10;            &quot;path_template&quot;: &quot;domain/selectors/&quot;,&#10;            &quot;generators&quot;: [SelectorGenerator],&#10;        },&#10;        &quot;services&quot;: {&#10;            &quot;path_template&quot;: &quot;domain/services/&quot;,&#10;            &quot;generators&quot;: [ServiceGenerator],&#10;        },&#10;        &quot;validators&quot;: {&#10;            &quot;path_template&quot;: &quot;domain/validators/&quot;,&#10;            &quot;generators&quot;: [ValidatorGenerator],&#10;        },&#10;    }&#10;&#10;    def add_arguments(self, parser):&#10;        parser.add_argument(&quot;app_name&quot;, type=str, help=&quot;Name of the app (e.g., user)&quot;)&#10;        parser.add_argument(&quot;model_name&quot;, type=str, help=&quot;Name of the model&quot;)&#10;        parser.add_argument(&#10;            &quot;--components&quot;,&#10;            nargs=&quot;+&quot;,&#10;            choices=[&quot;admin&quot;, &quot;domain&quot;, &quot;api&quot;] + list(self.COMPONENT_CONFIGS.keys()),&#10;            help=&quot;Specify components to generate (e.g., --components admin services). If not specified, all components will be generated.&quot;,&#10;        )&#10;&#10;    def get_app_path(self, app_name: str) -&gt; str:&#10;        try:&#10;            app_config = apps.get_app_config(app_name)&#10;            app_path = os.path.dirname(app_config.module.__file__)&#10;            self.stdout.write(f&quot;Found app path: {app_path}&quot;)&#10;            return app_path&#10;        except LookupError:&#10;            raise ValueError(f&quot;App '{app_name}' not found in INSTALLED_APPS&quot;)&#10;&#10;    def handle(self, *args, **options):&#10;        app_name = options[&quot;app_name&quot;]&#10;        model_name = options[&quot;model_name&quot;]&#10;        selected_components = options.get(&quot;components&quot;)&#10;&#10;        try:&#10;            app_path = self.get_app_path(app_name)&#10;            if not app_path:&#10;                raise ValueError(&quot;App path cannot be empty&quot;)&#10;&#10;            fields = get_model_fields(app_name, model_name)&#10;&#10;            if not selected_components:&#10;                components_to_generate = self.COMPONENT_CONFIGS.keys()&#10;            else:&#10;                components_to_generate = []&#10;                if &quot;admin&quot; in selected_components:&#10;                    components_to_generate.extend([&quot;fields&quot;, &quot;admin&quot;])&#10;                if &quot;domain&quot; in selected_components:&#10;                    components_to_generate.extend([&quot;selectors&quot;, &quot;services&quot;, &quot;validators&quot;])&#10;                if &quot;api&quot; in selected_components:&#10;                    components_to_generate.append(&quot;api&quot;)&#10;                components_to_generate.extend(&#10;                    [comp for comp in selected_components if comp in self.COMPONENT_CONFIGS]&#10;                )&#10;&#10;            components_to_generate = list(set(components_to_generate))  # Remove duplicates&#10;&#10;            for component in components_to_generate:&#10;                config = self.COMPONENT_CONFIGS.get(component)&#10;                if config:&#10;                    self._generate_component(&#10;                        app_path, app_name, model_name, component, config, fields, options&#10;                    )&#10;&#10;            self.stdout.write(&#10;                self.style.SUCCESS(f&quot;Successfully generated files for model '{model_name}'&quot;)&#10;            )&#10;        except Exception as e:&#10;            self.stdout.write(self.style.ERROR(f&quot;Error: {e}&quot;))&#10;&#10;    def _generate_component(&#10;            self,&#10;            app_path: str,&#10;            app_name: str,&#10;            model_name: str,&#10;            component: str,&#10;            config: dict,&#10;            fields: list,&#10;            options: dict,&#10;    ) -&gt; None:&#10;        path_template = config[&quot;path_template&quot;].format(model=model_name.lower())&#10;        base_path = os.path.join(app_path, path_template)&#10;        self.stdout.write(f&quot;Generating {component} in {base_path}&quot;)&#10;&#10;        model_class = apps.get_model(app_name, model_name)&#10;&#10;        # Generate admin classes&#10;        generators = [&#10;            generator_class(app_name, model_name, base_path, model_class)&#10;            for generator_class in config[&quot;generators&quot;]&#10;        ]&#10;&#10;        # Track if inline was generated to update admin generator&#10;        has_generated_inline = False&#10;        &#10;        for generator in generators:&#10;            if isinstance(generator, InlineAdminGenerator):&#10;                generator.generate(fields=fields)&#10;                has_generated_inline = True&#10;            elif isinstance(generator, AdminGenerator) and has_generated_inline:&#10;                # If inline was generated, tell admin generator to include it&#10;                generator.generate(fields=fields, has_inline=True)&#10;            else:&#10;                generator.generate(fields)&#10;" />
              <option name="updatedContent" value="import os&#10;&#10;from django.apps import apps&#10;from django.core.management import BaseCommand&#10;&#10;from ...generators.admin.admin_generator import AdminGenerator&#10;from ...generators.admin.change_view_generator import ChangeViewGenerator&#10;from ...generators.admin.checklist_generator import ChecklistGenerator&#10;from ...generators.admin.context_generator import ContextGenerator&#10;from ...generators.admin.display_generator import DisplayGenerator&#10;from ...generators.admin.inline import InlineAdminGenerator&#10;from ...generators.admin.list_view_generator import ListViewGenerator&#10;from ...generators.admin.permissions_generator import PermissionsGenerator&#10;from ...generators.admin.resource_generator import ResourceGenerator&#10;from ...generators.api.filter_generator import FilterGenerator&#10;from ...generators.api.pagination_generator import PaginationGenerator&#10;from ...generators.api.serializer_generator import SerializerGenerator&#10;from ...generators.api.url_generator import URLGenerator&#10;from ...generators.api.view_generator import ViewGenerator&#10;from ...generators.domain.selector_generator import SelectorGenerator&#10;from ...generators.domain.service_generator import ServiceGenerator&#10;from ...generators.domain.validator_generator import ValidatorGenerator&#10;from ...generators.field.fields_generator import FieldsGenerator&#10;from ...generators.model_utils import get_model_fields&#10;&#10;&#10;class Command(BaseCommand):&#10;    COMPONENT_CONFIGS = {&#10;        &quot;fields&quot;: {&#10;            &quot;path_template&quot;: &quot;fields/&quot;,&#10;            &quot;generators&quot;: [&#10;                FieldsGenerator,&#10;            ],&#10;        },&#10;        &quot;admin&quot;: {&#10;            &quot;path_template&quot;: &quot;admin/{model}/&quot;,&#10;            &quot;generators&quot;: [&#10;                ListViewGenerator,&#10;                ChangeViewGenerator,&#10;                PermissionsGenerator,&#10;                # ContextGenerator,&#10;                DisplayGenerator,&#10;                ResourceGenerator,&#10;                InlineAdminGenerator,&#10;                AdminGenerator,&#10;                ChecklistGenerator,&#10;            ],&#10;        },&#10;        &quot;api&quot;: {&#10;            &quot;path_template&quot;: &quot;api/{model}/&quot;,&#10;            &quot;generators&quot;: [&#10;                SerializerGenerator,&#10;                ViewGenerator,&#10;                URLGenerator,&#10;                FilterGenerator,&#10;                PaginationGenerator,&#10;            ],&#10;        },&#10;        &quot;selectors&quot;: {&#10;            &quot;path_template&quot;: &quot;domain/selectors/&quot;,&#10;            &quot;generators&quot;: [SelectorGenerator],&#10;        },&#10;        &quot;services&quot;: {&#10;            &quot;path_template&quot;: &quot;domain/services/&quot;,&#10;            &quot;generators&quot;: [ServiceGenerator],&#10;        },&#10;        &quot;validators&quot;: {&#10;            &quot;path_template&quot;: &quot;domain/validators/&quot;,&#10;            &quot;generators&quot;: [ValidatorGenerator],&#10;        },&#10;    }&#10;&#10;    def add_arguments(self, parser):&#10;        parser.add_argument(&quot;app_name&quot;, type=str, help=&quot;Name of the app (e.g., user)&quot;)&#10;        parser.add_argument(&quot;model_name&quot;, type=str, help=&quot;Name of the model&quot;)&#10;        parser.add_argument(&#10;            &quot;--components&quot;,&#10;            nargs=&quot;+&quot;,&#10;            choices=[&quot;admin&quot;, &quot;domain&quot;, &quot;api&quot;] + list(self.COMPONENT_CONFIGS.keys()),&#10;            help=&quot;Specify components to generate (e.g., --components admin services). If not specified, all components will be generated.&quot;,&#10;        )&#10;&#10;    def get_app_path(self, app_name: str) -&gt; str:&#10;        try:&#10;            app_config = apps.get_app_config(app_name)&#10;            app_path = os.path.dirname(app_config.module.__file__)&#10;            self.stdout.write(f&quot;Found app path: {app_path}&quot;)&#10;            return app_path&#10;        except LookupError:&#10;            raise ValueError(f&quot;App '{app_name}' not found in INSTALLED_APPS&quot;)&#10;&#10;    def handle(self, *args, **options):&#10;        app_name = options[&quot;app_name&quot;]&#10;        model_name = options[&quot;model_name&quot;]&#10;        selected_components = options.get(&quot;components&quot;)&#10;&#10;        try:&#10;            app_path = self.get_app_path(app_name)&#10;            if not app_path:&#10;                raise ValueError(&quot;App path cannot be empty&quot;)&#10;&#10;            fields = get_model_fields(app_name, model_name)&#10;&#10;            if not selected_components:&#10;                components_to_generate = self.COMPONENT_CONFIGS.keys()&#10;            else:&#10;                components_to_generate = []&#10;                if &quot;admin&quot; in selected_components:&#10;                    components_to_generate.extend([&quot;fields&quot;, &quot;admin&quot;])&#10;                if &quot;domain&quot; in selected_components:&#10;                    components_to_generate.extend([&quot;selectors&quot;, &quot;services&quot;, &quot;validators&quot;])&#10;                if &quot;api&quot; in selected_components:&#10;                    components_to_generate.append(&quot;api&quot;)&#10;                components_to_generate.extend(&#10;                    [comp for comp in selected_components if comp in self.COMPONENT_CONFIGS]&#10;                )&#10;&#10;            components_to_generate = list(set(components_to_generate))  # Remove duplicates&#10;&#10;            for component in components_to_generate:&#10;                config = self.COMPONENT_CONFIGS.get(component)&#10;                if config:&#10;                    self._generate_component(&#10;                        app_path, app_name, model_name, component, config, fields, options&#10;                    )&#10;&#10;            self.stdout.write(&#10;                self.style.SUCCESS(f&quot;Successfully generated files for model '{model_name}'&quot;)&#10;            )&#10;        except Exception as e:&#10;            self.stdout.write(self.style.ERROR(f&quot;Error: {e}&quot;))&#10;&#10;    def _generate_component(&#10;            self,&#10;            app_path: str,&#10;            app_name: str,&#10;            model_name: str,&#10;            component: str,&#10;            config: dict,&#10;            fields: list,&#10;            options: dict,&#10;    ) -&gt; None:&#10;        path_template = config[&quot;path_template&quot;].format(model=model_name.lower())&#10;        base_path = os.path.join(app_path, path_template)&#10;        self.stdout.write(f&quot;Generating {component} in {base_path}&quot;)&#10;&#10;        model_class = apps.get_model(app_name, model_name)&#10;&#10;        # Generate admin classes&#10;        generators = [&#10;            generator_class(app_name, model_name, base_path, model_class)&#10;            for generator_class in config[&quot;generators&quot;]&#10;        ]&#10;&#10;        # Track if inline was generated to update admin generator&#10;        has_generated_inline = False&#10;        &#10;        for generator in generators:&#10;            if isinstance(generator, InlineAdminGenerator):&#10;                generator.generate(fields=fields)&#10;                has_generated_inline = True&#10;            elif isinstance(generator, AdminGenerator) and has_generated_inline:&#10;                # If inline was generated, tell admin generator to include it&#10;                generator.generate(fields=fields, has_inline=True)&#10;            else:&#10;                generator.generate(fields)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/setup.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/setup.py" />
              <option name="originalContent" value="from setuptools import setup, find_packages&#10;&#10;with open(&quot;README.md&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as fh:&#10;    long_description = fh.read()&#10;&#10;setup(&#10;    name=&quot;django_model_suite&quot;,&#10;    version=&quot;0.2.0&quot;,&#10;    author=&quot;Omar Gawdat&quot;,&#10;    author_email=&quot;omargawdaat@gmail.com&quot;,&#10;    description=&quot;A Django app for generating boilerplate code&quot;,&#10;    long_description=long_description,&#10;    long_description_content_type=&quot;text/markdown&quot;,&#10;    url=&quot;https://github.com/omargawdat/django-model-suite&quot;,&#10;    packages=find_packages(),&#10;    classifiers=[&#10;        &quot;Development Status :: 3 - Alpha&quot;,&#10;        &quot;Environment :: Web Environment&quot;,&#10;        &quot;Framework :: Django&quot;,&#10;        &quot;Intended Audience :: Developers&quot;,&#10;        &quot;License :: OSI Approved :: MIT License&quot;,&#10;        &quot;Operating System :: OS Independent&quot;,&#10;        &quot;Programming Language :: Python :: 3.9&quot;,&#10;        &quot;Programming Language :: Python :: 3.10&quot;,&#10;        &quot;Programming Language :: Python :: 3.11&quot;,&#10;    ],&#10;    python_requires=&quot;&gt;=3.8&quot;,&#10;    install_requires=[&#10;        &quot;Django&gt;=5.0&quot;,&#10;        &quot;django-unfold&gt;=0.45.0&quot;,&#10;        &quot;djangorestframework&gt;=3.14.0&quot;,&#10;        &quot;django-filter&gt;=23.0&quot;,&#10;    ],&#10;)" />
              <option name="updatedContent" value="from setuptools import setup, find_packages&#10;&#10;with open(&quot;README.md&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as fh:&#10;    long_description = fh.read()&#10;&#10;setup(&#10;    name=&quot;django_model_suite&quot;,&#10;    version=&quot;0.2.1&quot;,&#10;    author=&quot;Omar Gawdat&quot;,&#10;    author_email=&quot;omargawdaat@gmail.com&quot;,&#10;    description=&quot;A Django app for generating boilerplate code&quot;,&#10;    long_description=long_description,&#10;    long_description_content_type=&quot;text/markdown&quot;,&#10;    url=&quot;https://github.com/omargawdat/django-model-suite&quot;,&#10;    packages=find_packages(),&#10;    classifiers=[&#10;        &quot;Development Status :: 3 - Alpha&quot;,&#10;        &quot;Environment :: Web Environment&quot;,&#10;        &quot;Framework :: Django&quot;,&#10;        &quot;Intended Audience :: Developers&quot;,&#10;        &quot;License :: OSI Approved :: MIT License&quot;,&#10;        &quot;Operating System :: OS Independent&quot;,&#10;        &quot;Programming Language :: Python :: 3.9&quot;,&#10;        &quot;Programming Language :: Python :: 3.10&quot;,&#10;        &quot;Programming Language :: Python :: 3.11&quot;,&#10;    ],&#10;    python_requires=&quot;&gt;=3.8&quot;,&#10;    install_requires=[&#10;        &quot;Django&gt;=5.0&quot;,&#10;        &quot;django-unfold&gt;=0.45.0&quot;,&#10;        &quot;djangorestframework&gt;=3.14.0&quot;,&#10;        &quot;django-filter&gt;=23.0&quot;,&#10;    ],&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>